{"ast":null,"code":"var _jsxFileName = \"/Users/campo/Desktop/react-wordpress-headless/src/components/MyComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordPressAPIComponent() {\n  _s();\n  const [testimonial, setTestimonial] = useState([]);\n  useEffect(() => {\n    const fetchTestimonials = async () => {\n      try {\n        // Realiza una solicitud GET a la API de WordPress\n        const response = await fetch('http://localhost:8888/wp-json/wp/v2/testimonios');\n\n        // Verifica si la solicitud fue exitosa\n        if (response.ok) {\n          // Extrae los datos JSON de la respuesta\n          const data = await response.json();\n\n          // Actualiza el estado de los posts con los datos obtenidos\n          setTestimonial(data);\n        } else {\n          // Si la solicitud no fue exitosa, muestra un mensaje de error\n          console.error('Error al obtener los posts:', response.statusText);\n        }\n      } catch (error) {\n        // Si hay algún error durante la solicitud, muestra el mensaje de error\n        console.error('Error al obtener los posts:', error);\n      }\n    };\n\n    // Llama a la función para obtener los posts cuando el componente esté montado\n    fetchTestimonials();\n  }, []); // El segundo argumento de useEffect es un arreglo vacío para que se ejecute solo una vez al montarse el componente\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\xDAltimos Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), testimonial[0].id, testimonial[1].id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}\n_s(WordPressAPIComponent, \"1jYQYsYgMp8TZuPIc3TvaLQz9y4=\");\n_c = WordPressAPIComponent;\nexport { WordPressAPIComponent };\nvar _c;\n$RefreshReg$(_c, \"WordPressAPIComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordPressAPIComponent","_s","testimonial","setTestimonial","fetchTestimonials","response","fetch","ok","data","json","console","error","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/campo/Desktop/react-wordpress-headless/src/components/MyComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nfunction WordPressAPIComponent(){\n    const [testimonial, setTestimonial] = useState([]);\n\n    useEffect(() => {\n      const fetchTestimonials = async () => {\n        try {\n          // Realiza una solicitud GET a la API de WordPress\n          const response = await fetch('http://localhost:8888/wp-json/wp/v2/testimonios');\n          \n          // Verifica si la solicitud fue exitosa\n          if (response.ok) {\n            // Extrae los datos JSON de la respuesta\n            const data = await response.json();\n            \n            // Actualiza el estado de los posts con los datos obtenidos\n            setTestimonial(data);\n          } else {\n            // Si la solicitud no fue exitosa, muestra un mensaje de error\n            console.error('Error al obtener los posts:', response.statusText);\n          }\n        } catch (error) {\n          // Si hay algún error durante la solicitud, muestra el mensaje de error\n          console.error('Error al obtener los posts:', error);\n        }\n      };\n  \n      // Llama a la función para obtener los posts cuando el componente esté montado\n      fetchTestimonials();\n    }, []); // El segundo argumento de useEffect es un arreglo vacío para que se ejecute solo una vez al montarse el componente\n  \n    return (\n      <div>\n        <h2>Últimos Posts</h2>\n        {testimonial[0].id}\n        {testimonial[1].id}\n\n      </div>\n    );\n}\n\n\nexport {WordPressAPIComponent}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,SAASC,qBAAqBA,CAAA,EAAE;EAAAC,EAAA;EAC5B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMO,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;;QAE/E;QACA,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf;UACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;;UAElC;UACAN,cAAc,CAACK,IAAI,CAAC;QACtB,CAAC,MAAM;UACL;UACAE,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEN,QAAQ,CAACO,UAAU,CAAC;QACnE;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACd;QACAD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;;IAED;IACAP,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBf,WAAW,CAAC,CAAC,CAAC,CAACgB,EAAE,EACjBhB,WAAW,CAAC,CAAC,CAAC,CAACgB,EAAE;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEZ;AAAChB,EAAA,CAtCQD,qBAAqB;AAAAmB,EAAA,GAArBnB,qBAAqB;AAyC9B,SAAQA,qBAAqB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}