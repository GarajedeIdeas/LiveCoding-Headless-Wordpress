{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst WordPressAPIComponent = () => {\n  _s();\n  onst[(testimonial, setTestimonial)] = useState([]);\n  useEffect(() => {\n    const fetchTestimonials = async () => {\n      try {\n        // Realiza una solicitud GET a la API de WordPress\n        const response = await fetch('http://localhost:8888/wp-json/wp/v2/testimonios');\n\n        // Verifica si la solicitud fue exitosa\n        if (response.ok) {\n          // Extrae los datos JSON de la respuesta\n          const data = await response.json();\n\n          // Actualiza el estado de los posts con los datos obtenidos\n          setTestimonial(data);\n        } else {\n          // Si la solicitud no fue exitosa, muestra un mensaje de error\n          console.error('Error al obtener los posts:', response.statusText);\n        }\n      } catch (error) {\n        // Si hay algún error durante la solicitud, muestra el mensaje de error\n        console.error('Error al obtener los posts:', error);\n      }\n    };\n\n    // Llama a la función para obtener los posts cuando el componente esté montado\n    fetchTestimonials();\n  }, []); // El segundo argumento de useEffect es un arreglo vacío para que se ejecute solo una vez al montarse el componente\n\n  return {\n    testimonial\n  };\n};\n_s(WordPressAPIComponent, \"0R7l53CiwQu7ziyMeHtgYF+Ya+E=\");\n_c = WordPressAPIComponent;\nexport default testimonial;\nvar _c;\n$RefreshReg$(_c, \"WordPressAPIComponent\");","map":{"version":3,"names":["React","useState","useEffect","WordPressAPIComponent","_s","onst","testimonial","setTestimonial","fetchTestimonials","response","fetch","ok","data","json","console","error","statusText","_c","$RefreshReg$"],"sources":["/Users/campo/Desktop/react-wordpress-headless/src/components/testimonials-api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst WordPressAPIComponent = () => {\n  onst [testimonial, setTestimonial] = useState([]);\n\n  useEffect(() => {\n    const fetchTestimonials = async () => {\n      try {\n        // Realiza una solicitud GET a la API de WordPress\n        const response = await fetch('http://localhost:8888/wp-json/wp/v2/testimonios');\n        \n        // Verifica si la solicitud fue exitosa\n        if (response.ok) {\n          // Extrae los datos JSON de la respuesta\n          const data = await response.json();\n          \n          // Actualiza el estado de los posts con los datos obtenidos\n          setTestimonial(data);\n        } else {\n          // Si la solicitud no fue exitosa, muestra un mensaje de error\n          console.error('Error al obtener los posts:', response.statusText);\n        }\n      } catch (error) {\n        // Si hay algún error durante la solicitud, muestra el mensaje de error\n        console.error('Error al obtener los posts:', error);\n      }\n    };\n  \n    // Llama a la función para obtener los posts cuando el componente esté montado\n    fetchTestimonials();\n  }, []); // El segundo argumento de useEffect es un arreglo vacío para que se ejecute solo una vez al montarse el componente\n\n  return (\n    {testimonial}\n  );\n};\n\nexport default testimonial;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClCC,IAAI,EAAEC,WAAW,EAAEC,cAAc,EAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;;QAE/E;QACA,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf;UACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;;UAElC;UACAN,cAAc,CAACK,IAAI,CAAC;QACtB,CAAC,MAAM;UACL;UACAE,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEN,QAAQ,CAACO,UAAU,CAAC;QACnE;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACd;QACAD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;;IAED;IACAP,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OACE;IAACF;EAAW,CAAC;AAEjB,CAAC;AAACF,EAAA,CAjCID,qBAAqB;AAAAc,EAAA,GAArBd,qBAAqB;AAmC3B,eAAeG,WAAW;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}